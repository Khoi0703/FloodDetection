import streamlit as st
from streamlit_folium import st_folium
from utils.map_utils import create_map
from dagster import DagsterInstance, Definitions, define_asset_job, materialize
import pandas as pd
import ast  # ƒê·ªÉ x·ª≠ l√Ω chu·ªói n·∫øu c·∫ßn

st.title("üìç B·∫£n ƒë·ªì d·ª± b√°o th·ªùi ti·∫øt Vi·ªát Nam")

# Load all required assets
from assets.weather_assets import vietnam_geojson, weather_forecasts, province_coordinates

# Create job definition and execute assets
defs = Definitions(assets=[vietnam_geojson, province_coordinates, weather_forecasts])
instance = DagsterInstance.get()
result = materialize(
    [vietnam_geojson, province_coordinates, weather_forecasts],
    instance=instance,
)

# Get materialized values
geojson_data = result.output_for_node("vietnam_geojson")
weather_data = result.output_for_node("weather_forecasts")

# ƒê·∫∑t ng∆∞·ª°ng l∆∞·ª£ng m∆∞a cao
RAIN_THRESHOLD = 50 # mm trong 5 ng√†y

# T·∫°o b·∫£n ƒë·ªì v·ªõi d·ªØ li·ªáu th·ªùi ti·∫øt
map_object = create_map(geojson_data, weather_data, rain_threshold=RAIN_THRESHOLD)
st_data = st_folium(map_object, width=700, height=500)

# Hi·ªÉn th·ªã c·∫£nh b√°o c√°c khu v·ª±c c√≥ l∆∞·ª£ng m∆∞a cao
high_rain_provinces = [
    province for province, data in weather_data.items()
    if data["total_rain"] > RAIN_THRESHOLD
]

if high_rain_provinces:
    st.warning("‚ö†Ô∏è **C·∫£nh b√°o c√°c khu v·ª±c c√≥ l∆∞·ª£ng m∆∞a cao:**")
    for province in high_rain_provinces:
        st.markdown(f"- **{province}**: {weather_data[province]['total_rain']} mm")
else:
    st.success("‚úÖ Kh√¥ng c√≥ khu v·ª±c n√†o v∆∞·ª£t ng∆∞·ª°ng l∆∞·ª£ng m∆∞a cao.")

if "selected_province" not in st.session_state:
    st.session_state.selected_province = None

if st_data:
    if "last_active_drawing" in st_data and st_data["last_active_drawing"]:
        properties = st_data["last_active_drawing"]["properties"]
        province_name = properties.get("ten_tinh", None)
        if province_name:
            st.session_state.selected_province = province_name

selected_province = st.selectbox(
    "üîç Ch·ªçn t·ªânh/th√†nh ph·ªë:",
    [feature["properties"]["ten_tinh"] for feature in geojson_data["features"]],
    index=[feature["properties"]["ten_tinh"] for feature in geojson_data["features"]].index(st.session_state.selected_province)
    if st.session_state.selected_province else 0
)

if selected_province != st.session_state.selected_province:
    st.session_state.selected_province = selected_province

if st.button("üì° Xem d·ª± b√°o th·ªùi ti·∫øt"):
    if st.session_state.selected_province in weather_data:
        province_weather = weather_data[st.session_state.selected_province]
        with st.expander(f"üìç D·ª± b√°o th·ªùi ti·∫øt t·∫°i {st.session_state.selected_province}", expanded=True):
            st.subheader("üìÖ **D·ª± b√°o th·ªùi ti·∫øt 5 ng√†y**")
            st.dataframe(province_weather["forecast"])
            st.markdown(f"### üåßÔ∏è **T·ªïng l∆∞·ª£ng m∆∞a trong 5 ng√†y**: `{province_weather['total_rain']} mm`")
            st.info("‚ÑπÔ∏è D·ªØ li·ªáu c√≥ th·ªÉ ƒë∆∞·ª£c l·∫•y t·ª´ cache ƒë·ªÉ t·ªëi ∆∞u h√≥a.")
    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt cho t·ªânh/th√†nh ph·ªë n√†y!")

# ƒê∆∞·ªùng d·∫´n file CSV
CSV_FILE = "weather_data.csv"

# Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th·ªùi ti·∫øt th√†nh DataFrame
def save_weather_data_to_csv(weather_data, csv_file):
    data = []
    for province, info in weather_data.items():
        # Ki·ªÉm tra xem "forecast" c√≥ t·ªìn t·∫°i
        if "forecast" in info:
            forecast = info["forecast"]

            # N·∫øu forecast l√† chu·ªói, chuy·ªÉn ƒë·ªïi v·ªÅ DataFrame
            if isinstance(forecast, str):
                try:
                    # Chuy·ªÉn chu·ªói v·ªÅ DataFrame
                    forecast_df = pd.read_csv(pd.compat.StringIO(forecast))
                except Exception as e:
                    st.warning(f"L·ªói khi chuy·ªÉn ƒë·ªïi forecast cho t·ªânh/th√†nh ph·ªë {province}: {e}")
                    continue
            elif isinstance(forecast, pd.DataFrame):
                forecast_df = forecast
            else:
                st.warning(f"D·ªØ li·ªáu forecast kh√¥ng h·ª£p l·ªá cho t·ªânh/th√†nh ph·ªë: {province}")
                continue

            # Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ DataFrame
            for _, row in forecast_df.iterrows():
                data.append({
                    "T·ªânh/Th√†nh ph·ªë": province,
                    "Ng√†y": row.get("üìÖ Ng√†y", "N/A"),
                    "Nhi·ªát ƒë·ªô trung b√¨nh (¬∞C)": row.get("üå°Ô∏è Nhi·ªát ƒë·ªô trung b√¨nh (¬∞C)", "N/A"),
                    "ƒê·ªô ·∫©m trung b√¨nh (%)": row.get("üíß ƒê·ªô ·∫©m trung b√¨nh (%)", "N/A"),
                    "Gi√≥ trung b√¨nh (m/s)": row.get("üå¨Ô∏è Gi√≥ trung b√¨nh (m/s)", "N/A"),
                    "T·ªïng l∆∞·ª£ng m∆∞a (mm)": row.get("üåßÔ∏è T·ªïng l∆∞·ª£ng m∆∞a (mm)", "N/A")
                })
        else:
            st.warning(f"D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá cho t·ªânh/th√†nh ph·ªë: {province}")
    
    # T·∫°o DataFrame v√† l∆∞u v√†o CSV
    if data:
        df = pd.DataFrame(data)
        df.to_csv(csv_file, index=False, encoding="utf-8-sig")
        st.success(f"D·ªØ li·ªáu th·ªùi ti·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file `{csv_file}`")
    else:
        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ l∆∞u v√†o CSV.")

# G·ªçi h√†m l∆∞u d·ªØ li·ªáu sau khi x·ª≠ l√Ω xong
save_weather_data_to_csv(weather_data, CSV_FILE)

# # Hi·ªÉn th·ªã d·ªØ li·ªáu th·ªùi ti·∫øt
# st.write(weather_data)
